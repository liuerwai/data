Spring 事务
	Spring不直接管理事务，而是交给事务管理器来管理事务。
	Spring提供平台事务管理接口，事务管理的具体实现是各个平台内部的事情。
	各个平台包括：
		DataSourceTransactonManager JDBC调用Java.sql.Connection来管理事务
		HibernateTransactionManager 调用org.hibernate.transaction对象来管理事务
		JpaTransactonManager 
		JtaTransactonManager 调用javax.transaction.UserTransaction来管理
事务属性
		传播行为
		隔离规则
		回滚规则
		事务超时
		是否只读
	传播行为：	
	PROPAGATION_REQUIRED
		如果存在一个事务，则支持当前事务，如果没有事务，则开启一个新的事务。
		方法A调用方法B，如果方法A有事务，则方法B和A共用一个事务，否正方法B创建一个事务。
	PROPAGATION_SUPPORTS
		如果存在一个事务，则支持当前事务，如果没有事务，则非事务运行。
		方法A调用方法B，如果方法A有事务，则方法B和A共用一个事务，如果方法B运行，则非事务运行。
	PROPAGATION_MANDATORY
		如果已经存在一个事务，支持当前事务，否正抛出异常。
	PROPAGATION_REQUIRES_NEW 
		总是开启一个新事务。如果存在一个事务，则将已经存在的事务挂起。
		使用PROPAGATION_REQUIRES_NEW,需要使用 JtaTransactionManager作为事务管理器。	
	PROPAGATION_NOT_SUPPORTED 
		总是非事务地执行，并挂起任何存在的事务。
		使用PROPAGATION_NOT_SUPPORTED,需要使用JtaTransactionManager作为事务管理器。
	PROPAGATION_NEVER 
		总是非事务的执行，如果存在一个事务，则抛出异常。
	PROPAGATION_NESTED 
		如果一个活动的事务存在，则运行在一个嵌套的事务中，否正新建一个事务。
	PROPAGATION_NESTED与PROPAGATION_REQUIRES_NEW的区别:
		它们非常类似,都像一个嵌套事务，如果不存在一个活动的事务，都会开启一个新的事务。
		使用 PROPAGATION_REQUIRES_NEW时，内层事务与外层事务就像两个独立的事务一样，一旦内层事务进行了提交后，外层事务不能对其进行回滚。
			两个事务互不影响。两个事务不是一个真正的嵌套事务。同时它需要JTA事务管理器的支持。
		使用PROPAGATION_NESTED时，外层事务的回滚可以引起内层事务的回滚。而内层事务的异常并不会导致外层事务的回滚，
			它是一个真正的嵌套事务。DataSourceTransactionManager使用savepoint支持PROPAGATION_NESTED时，需要JDBC 3.0以上驱动及1.4以上的JDK版本支持。其它的JTA TrasactionManager实现可能有不同的支持方式。
	隔离规则：
		ISOLATION_DEFAULT 数据库默认的隔离级别
		ISOLATION_READ_UNCOMMITTED 未提交读
		ISOLATION_READ_COMMITTTED 提交读
		ISOLATION_REPEATABLE_READ 可重复读
		ISIOLATION_SERIALIZABLE 串行化
	只读
		事务的第三个特性是它是否为只读事务。如果事务只对后端的数据库进行该操作，数据库可以利用事务的只读特性来进行一些特定的优化。通过将事务设置为只读，你就可以给数据库一个机会，让它应用它认为合适的优化措施。

	事务超时
		为了使应用程序很好地运行，事务不能运行太长的时间。因为事务可能涉及对后端数据库的锁定，所以长时间的事务会不必要的占用数据库资源。事务超时就是事务的一个定时器，在特定时间内事务如果没有执行完毕，那么就会自动回滚，而不是一直等待其结束。

	回滚规则
		事务五边形的最后一个方面是一组规则，这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行期异常时才会回滚，而在遇到检查型异常时不会回滚（这一行为与EJB的回滚行为是一致的） 
		但是你可以声明事务在遇到特定的检查型异常时像遇到运行期异常那样回滚。同样，你还可以声明事务遇到特定的异常不回滚，即使这些异常是运行期异常。
		

